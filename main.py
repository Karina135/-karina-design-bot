import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("user_activity.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üîê –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
OWNER_ID = 1290042252  # ‚Üê –í–∞—à ID (–∏–∑ @userinfobot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
async def log_and_notify(user: types.User, action: str):
    try:
        user_info = f"ID: {user.id}, Username: @{user.username if user.username else '–Ω–µ—Ç'}, Name: {user.full_name}"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {user_info} - {action}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        with open("user_activity.log", "a", encoding="utf-8") as f:
            f.write(log_message + "\n")
        logger.info(log_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        notify_text = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}\n"
        notify_text += f"üÜî <b>ID:</b> {user.id}\n"
        if user.username:
            notify_text += f"üë§ <b>Username:</b> @{user.username}\n"
        notify_text += f"üïí <b>–í—Ä–µ–º—è:</b> {timestamp}\n"
        notify_text += f"üìå <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}"

        try:
            await bot.send_message(OWNER_ID, notify_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
class BotData:
    def __init__(self):
        self.texts = {
            "greeting": """
–ü—Ä–∏–≤–µ—Ç!üëã

–Ø ‚Äî –ö–∞—Ä–∏–Ω–∞, –¥–∏–∑–∞–π–Ω–µ—Ä. 

–Ø —Ä–∞–±–æ—Ç–∞—é –æ–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:""",
            "portfolio": """ <b>–ú–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>
            
–ú–æ–∏ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:

‚Ä¢ <b>–í–µ–±-–¥–∏–∑–∞–π–Ω</b> - —Å–∞–π—Ç—ã, –ª–µ–Ω–¥–∏–Ω–≥–∏

‚Ä¢ <b>–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω</b> - –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥–±—É–∫–∏, –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –±–∞–Ω–Ω–µ—Ä—ã

‚Ä¢ <b>UI/UX –¥–∏–∑–∞–π–Ω</b> - –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã 

‚Ä¢ <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥—Ä—É–≥–æ–µ</b> - —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç—ã, backend —Å–∞–π—Ç–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏ —Ç.–ø. –Ω–∞ Tilda

‚Ä¢ <b>–†–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏</b> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –¥—Ä—É–≥–æ–µ""",
            "resume": """üìÑ <b>–ú–æ–µ —Ä–µ–∑—é–º–µ</b>
            
<u>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</u>
‚Ä¢ <b>2023-–Ω.–≤.</b>: Freelance Designer (—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞)

<u>–ö—É—Ä—Å—ã:</u>
‚Ä¢ –ö—É—Ä—Å Freedom "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Tilda"
‚Ä¢ –ö—É—Ä—Å Yudaev School –ø–æ Figma
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç +3 –≥–æ–¥–∞
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫ –∫–µ–π—Å-—á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –æ—Ç –ê–ª—å—Ñ–∞ –±–∞–Ω–∫–∞ (—Ä–æ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞) (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)  

<u>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:</u>
‚Ä¢ –í–µ–±-–¥–∏–∑–∞–π–Ω (–¥–∏–∑–∞–π–Ω —Å–∞–π—Ç–æ–≤, seo-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —Å–∞–π—Ç—ã –Ω–∞ Tilda)
‚Ä¢ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω (–ª–æ–≥–æ—Ç–∏–ø—ã, –∞–π–¥–µ–Ω—Ç–∏–∫–∞)  
‚Ä¢ –ë—Ä–µ–Ω–¥–∏–Ω–≥ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞–π–¥–µ–Ω—Ç–∏–∫–∏, –≥–∞–π–¥–ª–∞–π–Ω–æ–≤) 
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–π –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ 
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤ –≤ Telegram
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python
‚Ä¢ –í–µ—Ä—Å—Ç–∫–∞ –Ω–∞ HTML, CSS
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Figma, Photoshop, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏  
‚Ä¢ –û–ø—ã—Ç —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Ñ—Ä–∏–ª–∞–Ω—Å–∞ (–±–∏—Ä–∂–∏, –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã)  
‚Ä¢ –£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å—Ä–æ–∫ –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏  
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ  

<u>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —è–∑—ã–∫–∏:</u>
‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - Upper Intermediate (—Ä–∞–±–æ—Ç–∞—é —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏)""",
            "services": """üíº <b>–ú–æ–∏ —É—Å–ª—É–≥–∏</b>
            
1. <b>–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω</b>
- –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ - –æ—Ç 500 ‚ÇΩ —Å–ª–∞–π–¥
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è - –æ—Ç 2 000 ‚ÇΩ
- –î–∏–∑–∞–π–Ω –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏ (–≤–∏–∑–∏—Ç–∫–∏, –±—É–∫–ª–µ—Ç—ã) - –æ—Ç 2 000 ‚ÇΩ

2. <b>–í–µ–±-–¥–∏–∑–∞–π–Ω</b>
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ (–ª–µ–Ω–¥–∏–Ω–≥–∏, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ) - –æ—Ç 10 000 ‚ÇΩ
- –†–µ–¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ - –æ—Ç 20 000 ‚ÇΩ
- UI/UX –¥–∏–∑–∞–π–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –æ—Ç 30 000 ‚ÇΩ

3. <b>–î–∏–∑–∞–π–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π</b>
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ - –æ—Ç 3 000 ‚ÇΩ 

4. <b>–†–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏</b>
- –û–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ 

5. <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º</b>
- –û–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ

6. <b>–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–æ–≤</b>
- –û–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ

üîπ <b>–°–∫–∏–¥–∫–∞ 10%</b> –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!
üîπ –†–∞–±–æ—Ç–∞—é –æ–Ω–ª–∞–π–Ω
üîπ –¢–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ""",
            "contacts": """üì± <b>–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>
            
–Ø —Ä–∞–±–æ—Ç–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞!

<u>–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π:</u>
‚Ä¢ Telegram: @karinadesignspb

<u>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</u>
–ü–Ω-–ü—Ç: 10:00-18:00 (–ú–°–ö)
–°–±-–í—Å: –ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏""",
            "reviews": """‚≠ê <b>–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤</b>
            
1. <b>–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞, —Å–∞–π—Ç –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏:</b>
"–°–ø–∞—Å–∏–±–æ –æ–≥—Ä–æ–º–Ω–æ–µ –ö–∞—Ä–∏–Ω–µ –∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞ –º–æ–µ–π —Å—Ç—É–¥–∏–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ —É—á–µ—Ç –º–æ–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π, –ø–µ—Ä–µ–¥–µ–ª–æ–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –∏ —Ç.–¥. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞, –∞ —Ç–∞–∫ –∂–µ —á—É—Ç–∫–∏–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –±—ã–ª –Ω–∞ —Å–≤—è–∑–∏ –∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –æ—Ç–Ω–æ—Å–∏–ª—Å—è –∫ –º–æ–∏–º –ø—Ä–æ—Å—å–±–∞–º.üëçüëèüíê"

2. <b>–ê–Ω–¥—Ä–µ–π, –±–∞–Ω–Ω–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞:</b>
"–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤."

3. <b>–ú–∏—Ö–∞–∏–ª, –∏–Ω–≤–µ—Å—Ç–æ—Ä:</b>
"–ö–∞—Ä–∏–Ω–∞, –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –ø—Ä–∏—è—Ç–Ω–æ —Å –í–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å, –Ω–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –≤ –°–∫–æ–ª–∫–æ–≤–æ" """,
            "order": """‚úèÔ∏è <b>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</b>
            
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @karinadesignspb

–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:
1. –¢–∏–ø —Ä–∞–±–æ—Ç—ã (–ª–æ–≥–æ—Ç–∏–ø, —Å–∞–π—Ç –∏ —Ç.–¥.)
2. –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è
3. –ë—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. –°—Ä–æ–∫–∏
5. –í–∞—à id –¥–ª—è —Å–≤—è–∑–∏
–ù–∞–ø–∏—à–∏ –≤ —Å–º—Å –∑–¥–µ—Å—å - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞

–Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!

‚Ä¢ –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ +30% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ‚Äî –ø–∏—à–∏—Ç–µ @karinadesignspb
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—Å–∫–∏–¥–∫–∞ –¥–æ 20%)""",
            "order_thanks": """‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!</b>
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
–î–æ —Å–≤—è–∑–∏! üëã""",
            "referral": """üéÅ <b>–ê–∫—Ü–∏—è "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞"</b>
–ü—Ä–∏–≤–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∏ <b>10%</b> –æ—Ç —Å—É–º–º—ã –µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç!

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –†–∞—Å—Å–∫–∞–∂–∏ –¥—Ä—É–≥—É –ø—Ä–æ –º–æ–π –±–æ—Ç
2. –î—Ä—É–≥ –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–π @username
3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –µ–≥–æ –∑–∞–∫–∞–∑–∞ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–≤–æ–∏—Ö –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤!""",
            "faq": """‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>
            
<b>üîπ –ö–∞–∫–æ–≤—ã —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç?</b>
–°—Ä–æ–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:
‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø: 1-3 –¥–Ω—è
‚Ä¢ –°–∞–π—Ç: 5-30 –¥–Ω–µ–π
‚Ä¢ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞: 1-3 –¥–Ω—è
–¢–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π.

<b>üîπ –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã?</b>
1. –í—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –ø–∏—à–µ—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é
2. –ú—ã –æ–±—Å—É–∂–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞, —Ü–µ–ª–∏, –±—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏
3. –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –±—Ä–∏—Ñ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
4. –°–æ–∑–¥–∞—é –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏/–º–∞–∫–µ—Ç—ã
5. –í—ã –≤–Ω–æ—Å–∏—Ç–µ –ø—Ä–∞–≤–∫–∏ (–¥–æ 2-—Ö —Ä–∞—É–Ω–¥–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
6. –Ø –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏ –ø–µ—Ä–µ–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã

<b>üîπ –ú–æ–∂–Ω–æ –ª–∏ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞?</b>
–í —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã 2 —Ä–∞—É–Ω–¥–∞ –ø—Ä–∞–≤–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ (500‚ÇΩ –∑–∞ —Ä–∞—É–Ω–¥).

<b>üîπ –†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏?</b>
–î–∞, —Ä–∞–±–æ—Ç–∞—é –æ–Ω–ª–∞–π–Ω —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω. –û–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö (Upper Intermediate).

<b>üîπ –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã?</b>
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ:
1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
2. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
3. –ü—Ä–∏–º–µ—Ä—ã –¥–∏–∑–∞–π–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. –õ–æ–≥–æ—Ç–∏–ø –∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
5. –ë—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏ (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)""",
            "share_bot": """üì¢ <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º</b>
<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b>
https://t.me/KARINA_DESIGN_SPB_bot
<b>–ß—Ç–æ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º:</b>
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å–∞–π—Ç–æ–≤ –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å Tilda –∏ –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞
üéÅ <b>–ë–æ–Ω—É—Å:</b> –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç —Å—É–º–º—ã –µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!""",
            "tilda_sites": """üåê <b>–ú–æ–∏ —Å–∞–π—Ç—ã –Ω–∞ Tilda</b>
            
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>

üèó <b>Element Klinker ‚Äî –ø–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>
‚Ä¢ –ü—Ä–æ–¥–∞—é—â–∏–π –ª–µ–Ω–¥–∏–Ω–≥ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
‚Ä¢ –°—Å—ã–ª–∫–∞: <a href="https://elementklinker.ru">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>

üöö <b>Ecofeed Logistics ‚Äî –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —É—Å–ª—É–≥–∏
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Ñ–æ—Ä–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
‚Ä¢ –°—Å—ã–ª–∫–∞: <a href="https://ecofeed-logistics.ru/">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>

üåæ <b>Ecofeed Group ‚Äî –∫–æ—Ä–º–æ–≤—ã–µ –¥–æ–±–∞–≤–∫–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>
‚Ä¢ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI
‚Ä¢ –°—Å—ã–ª–∫–∞: <a href="https://ecofeedgroup.ru">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>""",
            "ai_work": """ <b>–†–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏</b>
–Ø —Å–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò –¥–ª—è:
‚Ä¢ –†–µ–∫–ª–∞–º—ã –∏ —Å–æ—Ü—Å–µ—Ç–µ–π
‚Ä¢ –ê—Ä—Ç–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
‚Ä¢ –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–π –∏ –¥—Ä—É–≥–æ–µ

‚úÖ –ë—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å

üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–∞–±–æ—Ç—É: <a href="https://www.avito.ru/sankt-peterburg/igry_pristavki_i_programmy/generatsiya_izobrazheniy_i_video_cherez_ii_7495771777">–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ Avito</a>""",
            "programming": """üíª <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</b>
            
–û–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚Äî –±–æ–ª–µ–µ 5 –ª–µ—Ç.

–Ø–∑—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ Python (–≤–∫–ª—é—á–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: aiogram, Django, Flask)
‚Ä¢ HTML, CSS, JavaScript
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å CSV, JSON, XML
‚Ä¢ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: SQLite, PostgreSQL (—á–µ—Ä–µ–∑ Python)
‚Ä¢ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Telegram, Avito, Yandex –∏ –¥—Ä.)

–ß—Ç–æ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ CRM
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –Ω–∞ Tilda + –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–¥
‚Ä¢ –í–µ—Ä—Å—Ç–∫–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 
‚Ä¢ –ò –¥—Ä—É–≥–æ–µ

–ü–∏—à–∏—Ç–µ ‚Äî –æ–±—Å—É–¥–∏–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç!""",
            "telegram_bots": """ü§ñ <b>Telegram-–±–æ—Ç—ã</b>
–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–æ—Ç–æ–≤ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram.

–ß—Ç–æ —É–º–µ—é:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ (–∑–∞–∫–∞–∑—ã, –æ–ø—Ä–æ—Å—ã, —Ä–∞—Å—Å—ã–ª–∫–∏)
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∞—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite, PostgreSQL)
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ (—á–µ—Ä–µ–∑ –ÆKassa, –°–ë–ü, –∫—Ä–∏–ø—Ç—É)
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å inline-–∫–Ω–æ–ø–∫–∏, –º–µ–Ω—é, —Ñ–∞–π–ª—ã
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∞—Ç—å –∫ –≤–µ–±-—Å–∞–π—Ç–∞–º –∏ CRM

–ü—Ä–∏–º–µ—Ä—ã: –±–æ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥, –ª–∏—á–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏, –±–æ—Ç—ã-–≤–∏–∑–∏—Ç–∫–∏, –±–æ—Ç—ã —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é.

–ì–æ—Ç–æ–≤–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞—à—É –∏–¥–µ—é! –ü–∏—à–∏—Ç–µ @karinadesignspb""",
        }
        self.resume_pdf_path = "–†–µ–∑—é–º–µ –ö–∞—Ä–∏–Ω–∞.pdf"
        self.resume_file_id = None
        self.order_button = "üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å"
        self.reviews_button = "‚≠ê –û—Ç–∑—ã–≤—ã"
        self.orders_file = "orders.txt"
        self.subscribers_file = "subscribers.txt"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
bot_data = BotData()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_order_state = {}
user_question_state = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def save_order(user_id: int, username: str, order_text: str):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(bot_data.orders_file, "a", encoding="utf-8") as f:
            f.write(f"\n=== –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ===\n")
            f.write(f"–î–∞—Ç–∞: {timestamp}\n")
            f.write(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n")
            f.write(f"Username: @{username}\n")
            f.write(f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{order_text}\n")
            f.write("=" * 20 + "\n")
        logger.info(f"–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
def save_question(user_id: int, username: str, question_text: str):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("questions.txt", "a", encoding="utf-8") as f:
            f.write(f"\n=== –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ===\n")
            f.write(f"–î–∞—Ç–∞: {timestamp}\n")
            f.write(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n")
            f.write(f"Username: @{username}\n")
            f.write(f"–í–æ–ø—Ä–æ—Å:\n{question_text}\n")
            f.write("=" * 20 + "\n")
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
def add_subscriber(user_id: int, username: str):
    try:
        with open(bot_data.subscribers_file, "a", encoding="utf-8") as f:
            f.write(f"{user_id}:{username}\n")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {username}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def remove_subscriber(user_id: int):
    try:
        subscribers = []
        with open(bot_data.subscribers_file, "r", encoding="utf-8") as f:
            for line in f:
                if line.strip():
                    sub_id, username = line.strip().split(":", 1)
                    if int(sub_id) != user_id:
                        subscribers.append(line)
        with open(bot_data.subscribers_file, "w", encoding="utf-8") as f:
            f.writelines(subscribers)
        logger.info(f"–£–¥–∞–ª—ë–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        return False

def get_subscribers():
    try:
        subscribers = []
        with open(bot_data.subscribers_file, "r", encoding="utf-8") as f:
            for line in f:
                if line.strip():
                    sub_id, username = line.strip().split(":", 1)
                    subscribers.append(int(sub_id))
        return subscribers
    except FileNotFoundError:
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

# –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notification_to_subscribers(message_text: str):
    subscribers = get_subscribers()
    success_count = 0
    for user_id in subscribers:
        try:
            await bot.send_message(user_id, message_text, parse_mode=ParseMode.HTML)
            success_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(subscribers)}")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        row_width=2,
        keyboard=[
            [KeyboardButton(text="–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ üé®"), KeyboardButton(text="–†–µ–∑—é–º–µ üìÑ")],
            [KeyboardButton(text="–£—Å–ª—É–≥–∏ üíº"), KeyboardButton(text=bot_data.reviews_button)],
            [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì±"), KeyboardButton(text=bot_data.order_button)],
            [KeyboardButton(text="‚ùì FAQ"), KeyboardButton(text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º")]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    log_and_notify(message.from_user, "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    user_order_state[message.from_user.id] = None
    user_question_state[message.from_user.id] = None
    await message.answer(bot_data.texts["greeting"], reply_markup=get_main_keyboard())

@dp.message(F.text == "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ üé®")
async def portfolio_handler(message: types.Message):
    log_and_notify(message.from_user, "–û—Ç–∫—Ä—ã–ª –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
    await message.answer(bot_data.texts["portfolio"])
    # –ö–Ω–æ–ø–∫–∏: —Å–Ω–∞—á–∞–ª–∞ Tilda, –ø–æ—Ç–æ–º —Ç—Ä–∏ –Ω–æ–≤—ã—Ö ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–æ—Ç—ã
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Figma", url="https://www.figma.com/design/TetYyMheMnoAnRSQiAvhu9/Work-Portfolio?node-id=0-1&t=VfbIusbOFb1gJMm5-1")],
        [InlineKeyboardButton(text="Behance", url="https://www.behance.net/...")],
        [InlineKeyboardButton(text="–°–∞–π—Ç—ã –Ω–∞ Tilda", callback_data="tilda_sites")],
        [InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏", callback_data="ai_work")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="programming")],
        [InlineKeyboardButton(text="Telegram-–±–æ—Ç—ã", callback_data="telegram_bots")],
    ])
    await message.answer("üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–∏ —Ä–∞–±–æ—Ç—ã:", reply_markup=markup)

@dp.callback_query(F.data == "tilda_sites")
async def tilda_sites_callback(callback: types.CallbackQuery):
    log_and_notify(callback.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–∞–π—Ç—ã –Ω–∞ Tilda")
    await callback.message.answer(bot_data.texts["tilda_sites"])
    await callback.answer()

@dp.callback_query(F.data == "ai_work")
async def ai_work_callback(callback: types.CallbackQuery):
    log_and_notify(callback.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏")
    await callback.message.answer(bot_data.texts["ai_work"], parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "programming")
async def programming_callback(callback: types.CallbackQuery):
    log_and_notify(callback.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    await callback.message.answer(bot_data.texts["programming"], parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "telegram_bots")
async def telegram_bots_callback(callback: types.CallbackQuery):
    log_and_notify(callback.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞–∑–¥–µ–ª Telegram-–±–æ—Ç–æ–≤")
    await callback.message.answer(bot_data.texts["telegram_bots"], parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.message(F.text == "–†–µ–∑—é–º–µ üìÑ")
async def resume_handler(message: types.Message):
    log_and_notify(message.from_user, "–ó–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–∑—é–º–µ")
    try:
        await message.answer(bot_data.texts["resume"])
        if bot_data.resume_file_id:
            await message.answer_document(bot_data.resume_file_id, caption="üìÑ –ú–æ–µ —Ä–µ–∑—é–º–µ –≤ PDF")
        elif os.path.exists(bot_data.resume_pdf_path):
            pdf = FSInputFile(bot_data.resume_pdf_path)
            sent_message = await message.answer_document(pdf, caption="üìÑ –ú–æ–µ —Ä–µ–∑—é–º–µ –≤ PDF")
            bot_data.resume_file_id = sent_message.document.file_id
        else:
            await message.answer("‚ö†Ô∏è –§–∞–π–ª —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"Error sending resume: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—é–º–µ.")

@dp.message(F.text == "–£—Å–ª—É–≥–∏ üíº")
async def services_handler(message: types.Message):
    log_and_notify(message.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —É—Å–ª—É–≥–∏")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order_service")]
    ])
    await message.answer(bot_data.texts["services"], reply_markup=markup)

@dp.message(F.text == bot_data.reviews_button)
async def reviews_handler(message: types.Message):
    log_and_notify(message.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –æ—Ç–∑—ã–≤—ã")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url="https://t.me/...")],
        [InlineKeyboardButton(text="–í—Å–µ –æ—Ç–∑—ã–≤—ã", url="https://vk.com/...")]
    ])
    await message.answer(bot_data.texts["reviews"], reply_markup=markup)

@dp.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã üì±")
async def contacts_handler(message: types.Message):
    log_and_notify(message.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å", url="https://t.me/karinadesignspb")]
    ])
    await message.answer(bot_data.texts["contacts"], reply_markup=markup)

@dp.message(F.text == bot_data.order_button)
async def order_handler(message: types.Message):
    log_and_notify(message.from_user, "–ù–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    user_order_state[message.from_user.id] = True
    text = bot_data.texts["order"] + """
üìé <b>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª —Å –¢–ó –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∫ –∑–∞–∫–∞–∑—É!</b>
üéÅ <b>–ë–æ–Ω—É—Å:</b> –Ω–∞–∑–æ–≤–∏—Ç–µ @username –¥—Ä—É–≥–∞ –¥–ª—è —Å–∫–∏–¥–∫–∏ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!"""
    await message.answer(text)

@dp.message(F.text == "‚ùì FAQ")
async def faq_handler(message: types.Message):
    log_and_notify(message.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª FAQ")
    await message.answer(bot_data.texts["faq"], parse_mode=ParseMode.HTML)

@dp.message(Command("logs"))
async def send_logs(message: types.Message):
    if message.from_user.id == OWNER_ID:
        try:
            if os.path.exists("user_activity.log"):
                await message.answer_document(
                    FSInputFile("user_activity.log"),
                    caption="üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
            else:
                await message.answer("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("üîê –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp.message(F.text == "üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º")
async def share_bot_handler(message: types.Message):
    log_and_notify(message.from_user, "–ü–æ–¥–µ–ª–∏–ª—Å—è –±–æ—Ç–æ–º")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query="checkout")]
    ])
    await message.answer(bot_data.texts["share_bot"], reply_markup=markup)

@dp.message(F.text & ~F.text.startswith('/'))
async def process_order_details(message: types.Message):
    state = user_order_state.get(message.from_user.id)
    question_state = user_question_state.get(message.from_user.id)
    if state is True:
        log_and_notify(message.from_user, f"–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑: {message.text}")
        save_order(message.from_user.id, message.from_user.username or "–Ω–µ—Ç", message.text)
        await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done.")
        user_order_state[message.from_user.id] = "file"
    elif question_state is True:
        log_and_notify(message.from_user, f"–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {message.text}")
        save_question(message.from_user.id, message.from_user.username or "–Ω–µ—Ç", message.text)
        await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_keyboard())
        user_question_state[message.from_user.id] = None
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

@dp.message(F.document | F.photo)
async def process_order_file(message: types.Message):
    state = user_order_state.get(message.from_user.id)
    if state in [True, "file"]:
        file_name = message.document.file_name if message.document else "photo.jpg"
        log_and_notify(message.from_user, f"–ü—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª: {file_name}")
        with open(bot_data.orders_file, "a", encoding="utf-8") as f:
            f.write(f"–§–∞–π–ª: {file_name}\n")
        await message.answer("‚úÖ –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ /done.")
        user_order_state[message.from_user.id] = "file"

@dp.message(Command("done"))
async def finish_order_files(message: types.Message):
    state = user_order_state.get(message.from_user.id)
    if state in [True, "file"]:
        log_and_notify(message.from_user, "–ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑")
        await message.answer(bot_data.texts["order_thanks"], reply_markup=get_main_keyboard())
        user_order_state[message.from_user.id] = None

@dp.callback_query(F.data == "order_service")
async def order_service_callback(callback: types.CallbackQuery):
    log_and_notify(callback.from_user, "–ù–∞–∂–∞–ª '–ó–∞–∫–∞–∑–∞—Ç—å'")
    user_order_state[callback.from_user.id] = True
    await callback.message.answer(bot_data.texts["order"] + "\nüéÅ –°–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥—Ä—É–≥–∞!")
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"Bot crashed: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
